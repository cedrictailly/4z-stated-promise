{"version":3,"file":"4z-stated-promise.min.js","sources":["../src/index.mjs"],"sourcesContent":["\n// TODO: race() + any() : Error(\"This is an error\") thrown at the end of the timeout for StatedPromise but not for Promise\n\nfunction getIterator(value) {\n\n  if (value[Symbol.iterator])\n    return value[Symbol.iterator]();\n\n  if (value.next)\n    return value;\n\n  throw new TypeError(\"Value is not iterable\");\n}\n\nexport default class StatedPromise {\n\n  static resolve(value) { return new this(resolve => resolve(value)); }\n  static reject(reason) { return new this((resolve, reject) => reject(reason)); }\n\n  static coerce(value) {\n\n    if (typeof value == \"function\") {\n      try {\n        value = value();\n      } catch (error) {\n        return StatedPromise.reject(error);\n      }\n    }\n\n    if (value instanceof StatedPromise)\n      return value;\n\n    if (value instanceof Promise)\n      return new StatedPromise((resolve, reject) => {value.then(resolve, reject);});\n\n    return StatedPromise.resolve(value);\n  }\n\n  static allSettled(values) {\n\n    if (!values)\n      return StatedPromise.resolve([]);\n\n    const iterator = getIterator(values);\n\n    return new this((resolve, reject) => {\n\n      const result = [];\n\n      const next = (pred = null) => {\n\n        switch (pred?.state) {\n        case \"fulfilled\": result.push({status: \"fulfilled\", value: pred.value});   break;\n        case \"rejected\":  result.push({status: \"rejected\",  reason: pred.reason}); break;\n        }\n\n        const {value, done} = iterator.next();\n\n        if (done)\n          return resolve(result);\n\n        const p = this.coerce(value);\n\n        if (p.state != \"pending\")\n          return next(p);\n\n        p.then(\n          value  => { next(p); },\n          reason => { next(p); },\n        );\n      };\n\n      next();\n    });\n  }\n\n  static all(values) {\n\n    if (!values)\n      return StatedPromise.resolve([]);\n\n    return new this((resolve, reject) => {\n\n      const result  = [];\n      const pending = new Set();\n\n      const check = () => {\n        if (pending.size == 0)\n          resolve(result);\n      };\n\n      for (const value of values) {\n\n        const p = this.coerce(value);\n\n        switch (p.state) {\n\n        case \"fulfilled\":\n          result.push(p.value);\n          break;\n\n        case \"rejected\":\n          return reject(p.reason);\n\n        default: {\n\n          const index = result.length;\n\n          result.push(-1);\n\n          pending.add(\n            p.then(\n              value => {\n                result[index] = value;\n                pending.delete(p);\n                check();\n              },\n              reject,\n            ),\n          );\n\n        } break;\n        }\n      }\n\n      check();\n    });\n  }\n\n  static any(values) {\n\n    if (!values)\n      return StatedPromise.reject(new AggregateError([], \"No promises to resolve\"));\n\n    return new this((resolve, reject) => {\n\n      const errors  = [];\n      const pending = new Set();\n\n      const check = () => {\n        if (pending.size == 0)\n          reject(new AggregateError(errors, \"All promises were rejected\"));\n      };\n\n      for (const value of values) {\n\n        const p = this.coerce(value);\n\n        switch (p.state) {\n\n        case \"fulfilled\":\n          return resolve(p.value);\n\n        case \"rejected\":\n          errors.push(p.reason);\n          break;\n\n        default: {\n\n          const index = errors.length;\n\n          errors.push(undefined);\n\n          pending.add(\n            p.then(\n              resolve,\n              error => {\n                errors[index] = error;\n                pending.delete(p);\n                check();\n              },\n            ),\n          );\n        } break;\n        }\n      }\n\n      check();\n    });\n  }\n\n  static race(values) {\n\n    if (!values)\n      return StatedPromise.reject(new AggregateError([], \"No promises to resolve\"));\n\n    return new this((resolve, reject) => {\n\n      for (const value of values) {\n\n        const p = this.coerce(value).catch(() => {});\n\n        switch (p.state) {\n\n        case \"fulfilled\":\n          return resolve(p.value);\n\n        case \"rejected\":\n          return reject(p.reason);\n\n        default:\n          p.then(resolve).catch(reject);\n          break;\n        }\n      }\n    });\n  }\n\n  static handle(callback) {\n\n    const promise = new this(callback);\n\n    switch (promise.state) {\n\n    case \"fulfilled\":\n      return promise.value;\n\n    case \"rejected\":\n      throw promise.reason;\n\n    default:\n      return promise.#promise;\n    }\n  }\n\n  #state;\n  #value;\n  #reason;\n  #promise;\n\n  get state()   { return this.#state; }\n  get value()   { return this.#value; }\n  get reason()  { return this.#reason; }\n  get promise() { return this.#promise; }\n\n  constructor(callback) {\n\n    if (typeof callback !== \"function\")\n      throw new TypeError(\"StatedPromise constructor argument must be a function\");\n\n    this.#state = \"pending\";\n\n    this.#promise = new Promise((resolve, reject) => {\n\n      const resolved = value => {\n        this.#state = \"fulfilled\";\n        this.#value = value;\n        resolve(value);\n      };\n\n      const rejected = reason => {\n        this.#state  = \"rejected\";\n        this.#reason = reason;\n        reject(reason);\n      };\n\n      try {\n        callback(resolved, rejected);\n      } catch (error) {\n        rejected(error);\n      }\n    });\n  }\n\n  then(resolved, rejected) {\n\n    switch (this.state) {\n\n    case \"fulfilled\":\n      resolved(this.value);\n      break;\n\n    case \"rejected\":\n      if (!rejected) throw this.reason;\n      rejected(this.reason);\n      break;\n\n    default:\n      this.#promise = this.#promise.then(resolved, rejected);\n      break;\n    }\n\n    return this;\n  }\n\n  catch(callback) {\n\n    switch (this.state) {\n\n    case \"fulfilled\":\n      break;\n\n    case \"rejected\":\n      callback(this.reason);\n      break;\n\n    default:\n      this.#promise = this.#promise.catch(callback);\n      break;\n    }\n\n    return this;\n  }\n\n  finally(callback) {\n    this.#promise = this.#promise.finally(callback);\n    return this;\n  }\n\n  toJSON() {\n    return {\n      state : this.#state,\n      value : this.#value,\n      reason: this.#reason?.toString(),\n    };\n  }\n}\n"],"names":["StatedPromise","resolve","value","this","reject","reason","coerce","error","Promise","then","allSettled","values","iterator","Symbol","next","TypeError","getIterator","result","pred","state","push","status","done","p","all","pending","Set","check","size","index","length","add","delete","any","errors","AggregateError","undefined","race","catch","handle","callback","promise","constructor","resolved","rejected","finally","toJSON","toString"],"mappings":"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"}